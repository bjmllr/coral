<h1><%= t('.title') %></h1>

<p class="alert"><%=t('.pending_entries', count: "-").html_safe %></p>
<ul id='pending-entry-preview' class="list-group"></ul>

<%= render 'form', restoration_activity_log_entry: @restoration_activity_log_entry %>

<%= link_to t('defaults.actions.back'), restoration_activity_log_entries_path %>

<script>
function initWriteDatabase() {
  return new Promise((resolve, reject) => {
    console.log('db init');
    var request = self.indexedDB.open("writeDatabase", 3);
    request.onsuccess = (event) => {
      console.log('db opened');
      resolve(event.target.result);
    }
    request.onupgradeneeded = function(event) {
      console.log('upgrading db');
      // Save the IDBDatabase interface 
      var db = event.target.result;

      // Create an objectStore for this database
      var objectStore = db.createObjectStore("writes", { keyPath: "key" });
    };
  });
}

function getAllWrites(db) {
  return new Promise((resolve, reject) => {
    var writes = [];
    var writesCursorRequest = db.transaction("writes").objectStore("writes").openCursor();
    writesCursorRequest.onsuccess = function(event) {
      var cursor = event.target.result;
      if(cursor) {
        writes.push(cursor.value);
        cursor.continue();
      } else {
        resolve(writes);
      }
    }
  })
}

function previewWrite(write) {
  var body = (write.request || {})['body'];
  var headers = (write.request || {})['headers'];
  var content_type = (headers || {})['content-type'];
  var data = {};
  var values = [];

  // parse the POST form body
  if (content_type === 'application/x-www-form-urlencoded') {
    var pairs = body.split('&');
    for (var i = 0; i < pairs.length; i += 1) {
      var pair = pairs[i].split('=');
      var key = decodeURIComponent(pair[0]);
      var val = decodeURIComponent(pair[1]);

      // remove brackets from param names, e.g., zone[id] => id
      if (/^[^\[]+\[[^\[\]]+\]$/.test(key)) {
        key = key.replace(/[^\[]+\[/, '');
        key = key.replace(/\]/, '');
      }

      data[key] = val;
    }

    // omit params that are not part of the form
    delete data['utf8'];
    delete data['authenticity_token'];
    delete data['commit'];
    delete data['status'];
  } else {
    data = write;
  }

  console.log('data', data);
  for (key in data) {
    values.push('<span><b>' + key + '</b> ' + data[key] + '</span>');
  }

  return(
    '<li class="list-group-item">' + write.key + ' (' + write.status + ') ' + values.join(', ') + '</li>'
  );
}

document.addEventListener('DOMContentLoaded', () => {
  initWriteDatabase().then(getAllWrites).then(writes => {
    document.getElementById('pending-entry-count').innerHTML = writes.length;
    var preview = document.getElementById('pending-entry-preview');
    for (var i = 0; i < writes.length; i += 1) {
      preview.innerHTML += previewWrite(writes[i]);
    }
  });
});
</script>
